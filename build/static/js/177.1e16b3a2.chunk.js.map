{"version":3,"file":"static/js/177.1e16b3a2.chunk.js","mappings":"oKAMaA,EAAe,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,SAC7B,OACE,SAAC,IAAD,CACEC,GAAI,CACFC,gBAAiB,2BACjBC,QAAS,OACTC,OAAQ,iBACRC,MAAO,CAAEC,GAAI,cAAeC,GAAI,UALpC,UAQE,SAAC,IAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAnC,SACGT,Q,2ICmGT,UAtGe,WACb,IAAMU,GAAoBC,EAAAA,EAAAA,YAAWC,EAAAA,GAMrC,OACE,UAAC,IAAD,YACE,SAAC,IAAD,wBACA,SAAC,IAAD,CAAOX,GAAI,CAAEY,SAAU,QAASV,QAAS,QAAzC,UACE,SAAC,KAAD,CACEW,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,eAAgB,IAElBC,SAAU,SAACC,EAAQC,IAfN,SAAC,GAAqD,IAAnDN,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,SACvCK,QAAQC,IAAI,CAAER,MAAAA,EAAOC,SAAAA,EAAUC,SAAAA,IAevBO,CAAaJ,IAIfK,kBAAkBC,EAAAA,EAAAA,IAAO,CACvBX,OAAOY,EAAAA,EAAAA,MAASC,SAAS,qBAAqBb,MAAM,iBACpDC,UAAUW,EAAAA,EAAAA,MACPC,SAAS,wBACTC,IAAI,EAAG,6CACVZ,UAAUU,EAAAA,EAAAA,MACPC,SAAS,wBACTC,IAAI,EAAG,6CACVX,gBAAgBS,EAAAA,EAAAA,MACbC,SAAS,mBACTE,MAAM,EAACC,EAAAA,EAAAA,IAAI,YAAa,MAAO,0BAtBtC,SAyBG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,MAA7B,OACC,SAAC,KAAD,WACE,UAAC,IAAD,CAAKlC,GAAI,CAAEmC,QAAS,OAAQC,cAAe,SAAUC,IAAK,QAA1D,WACE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,QACLC,GAAIC,EAAAA,EACJjC,QAAQ,WACRkC,MAAOjC,EACPkC,MAAM,QACNC,QAASb,EAAOjB,SAAWmB,EAAQnB,MACnC+B,aAAcZ,EAAQnB,OAASiB,EAAOjB,MACtCgC,WAAS,KAEX,SAAC,KAAD,CACER,KAAK,WACLC,KAAK,WACLC,GAAIC,EAAAA,EACJjC,QAAQ,WACRkC,MAAOjC,EACPkC,MAAM,WACNC,QAASb,EAAOhB,YAAckB,EAAQlB,SACtC8B,aAAcZ,EAAQlB,UAAYgB,EAAOhB,SACzC+B,WAAS,KAEX,SAAC,KAAD,CACER,KAAK,WACLC,KAAK,WACLC,GAAIC,EAAAA,EACJjC,QAAQ,WACRkC,MAAOjC,EACPkC,MAAM,WACNC,QAASb,EAAOf,YAAciB,EAAQjB,SACtC6B,aAAcZ,EAAQjB,UAAYe,EAAOf,SACzC8B,WAAS,KAEX,SAAC,KAAD,CACER,KAAK,iBACLC,KAAK,WACLC,GAAIC,EAAAA,EACJjC,QAAQ,WACRkC,MAAOjC,EACPkC,MAAM,kBACNC,QAASb,EAAOd,kBAAoBgB,EAAQhB,eAC5C4B,aAAcZ,EAAQhB,gBAAkBc,EAAOd,eAC/C6B,WAAS,KAEX,SAAC,IAAD,CACEP,KAAK,SACLQ,UAAWb,IAAUF,EACrBc,WAAS,EACTtC,QAAQ,YACRkC,MAAOjC,EACPT,GAAI,CAAEgD,OAAQ,QANhB","sources":["components/styled/HeadingPaper.tsx","pages/SignUp/SignUp.tsx"],"sourcesContent":["import { Paper, Typography } from '@mui/material'\r\n\r\ntype HeadingPaperProps = {\r\n  children: JSX.Element | string\r\n}\r\n\r\nexport const HeadingPaper = ({ children }: HeadingPaperProps): JSX.Element => {\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        backgroundColor: 'rgba(255, 255, 255, 0.5)',\r\n        padding: '25px',\r\n        margin: '24px 0 100px 0',\r\n        width: { xs: 'fit-content', md: '300px' },\r\n      }}\r\n    >\r\n      <Typography component='h1' variant='h3'>\r\n        {children}\r\n      </Typography>\r\n    </Paper>\r\n  )\r\n}\r\n","import { Box, Button, Container, Paper, TextField } from '@mui/material'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { useContext } from 'react'\r\nimport { object, ref, string } from 'yup'\r\nimport { HeadingPaper } from '../../components/styled/HeadingPaper'\r\nimport { ThemeContext } from '../../context/ThemeContext'\r\n\r\ntype SignUpValuesType = {\r\n  email: string\r\n  userName: string\r\n  password: string\r\n  repeatPassword: string\r\n}\r\n\r\nconst SignUp = (): JSX.Element => {\r\n  const ThemeContextColor = useContext(ThemeContext)\r\n\r\n  const handleSubmit = ({ email, userName, password }: SignUpValuesType) => {\r\n    console.log({ email, userName, password })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <HeadingPaper>Register</HeadingPaper>\r\n      <Paper sx={{ maxWidth: '600px', padding: '20px' }}>\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            userName: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n          }}\r\n          onSubmit={(values, formikHelpers) => {\r\n            handleSubmit(values)\r\n            // Reset form on submit\r\n            // formikHelpers.resetForm()\r\n          }}\r\n          validationSchema={object({\r\n            email: string().required('Email is required').email('Invalid email'),\r\n            userName: string()\r\n              .required('Username is required')\r\n              .min(2, 'Username should be min. 2 characters long'),\r\n            password: string()\r\n              .required('Password is required')\r\n              .min(8, 'Password should be min. 8 characters long'),\r\n            repeatPassword: string()\r\n              .required('Repeat password')\r\n              .oneOf([ref('password'), null], 'Passwords must match'),\r\n          })}\r\n        >\r\n          {({ errors, isValid, touched, dirty }) => (\r\n            <Form>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n                <Field\r\n                  name='email'\r\n                  type='email'\r\n                  as={TextField}\r\n                  variant='outlined'\r\n                  color={ThemeContextColor}\r\n                  label='Email'\r\n                  error={!!errors.email && !!touched.email}\r\n                  helperText={!!touched.email && errors.email}\r\n                  fullWidth\r\n                />\r\n                <Field\r\n                  name='userName'\r\n                  type='userName'\r\n                  as={TextField}\r\n                  variant='outlined'\r\n                  color={ThemeContextColor}\r\n                  label='Username'\r\n                  error={!!errors.userName && !!touched.userName}\r\n                  helperText={!!touched.userName && errors.userName}\r\n                  fullWidth\r\n                />\r\n                <Field\r\n                  name='password'\r\n                  type='password'\r\n                  as={TextField}\r\n                  variant='outlined'\r\n                  color={ThemeContextColor}\r\n                  label='Password'\r\n                  error={!!errors.password && !!touched.password}\r\n                  helperText={!!touched.password && errors.password}\r\n                  fullWidth\r\n                />\r\n                <Field\r\n                  name='repeatPassword'\r\n                  type='password'\r\n                  as={TextField}\r\n                  variant='outlined'\r\n                  color={ThemeContextColor}\r\n                  label='Repeat password'\r\n                  error={!!errors.repeatPassword && !!touched.repeatPassword}\r\n                  helperText={!!touched.repeatPassword && errors.repeatPassword}\r\n                  fullWidth\r\n                />\r\n                <Button\r\n                  type='submit'\r\n                  disabled={!dirty || !isValid}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color={ThemeContextColor}\r\n                  sx={{ height: '50px' }}\r\n                >\r\n                  Sign up\r\n                </Button>\r\n              </Box>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Paper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n"],"names":["HeadingPaper","children","sx","backgroundColor","padding","margin","width","xs","md","component","variant","ThemeContextColor","useContext","ThemeContext","maxWidth","initialValues","email","userName","password","repeatPassword","onSubmit","values","formikHelpers","console","log","handleSubmit","validationSchema","object","string","required","min","oneOf","ref","errors","isValid","touched","dirty","display","flexDirection","gap","name","type","as","TextField","color","label","error","helperText","fullWidth","disabled","height"],"sourceRoot":""}